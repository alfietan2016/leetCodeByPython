# 旋转数组
# 给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
#
# 示例 1:
# 输入: [1,2,3,4,5,6,7] 和 k = 3
# 输出: [5,6,7,1,2,3,4]
# 解释:
# 向右旋转 1 步: [7,1,2,3,4,5,6]
# 向右旋转 2 步: [6,7,1,2,3,4,5]
# 向右旋转 3 步: [5,6,7,1,2,3,4]
#
# 示例 2:
# 输入: [-1,-100,3,99] 和 k = 2
# 输出: [3,99,-1,-100]
# 解释:
# 向右旋转 1 步: [99,-1,-100,3]
# 向右旋转 2 步: [3,99,-1,-100]
#
# 说明:
#
# 尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
# 要求使用空间复杂度为 O(1) 的 原地 算法。


"""
旋转数组，先将0到l-k的数组旋转，再将l-k到l的数组旋转，最后再次旋转，获得新的数组
时间复杂度为O(1)，空间复杂度为O(1)
"""
def rotate(nums, k):
    l = len(nums)
    nums[:l-k] = reversed(nums[:l-k])
    nums[l-k:] = reversed(nums[l-k:])
    nums[:] = reversed(nums[:])


if __name__ == '__main__':
    nums1 = [1, 2, 3, 4, 5, 6, 7]
    k1 = 3
    nums2 = [-1, -100, 3, 99]
    k2 = 2
    rotate(nums1, k1)
    rotate(nums2, k2)
    print(nums1 == [5, 6, 7, 1, 2, 3, 4])
    print(nums2 == [3, 99, -1, -100])